extern crate iron;
extern crate router;
extern crate hyper;

use iron::prelude::*;
use iron::status;
use router::Router;
use iron::method::Method;
use iron::response::HttpResponse;
use iron::middleware::Handler;
use hyper::version::HttpVersion;

//fn main() {
//    fn hello_world(_: &mut Request) -> IronResult<Response> {
//        Ok(Response::with((status::Ok, "Hello World!")))
//    }
//
//    Iron::new(hello_world).http("localhost:3000").unwrap();
//    println!("On 3000");
//    
//    let router = Router::new();
//	router.route(Method::Get, "/users/:userid/:friendid", Handler::handle);
//}

fn main() {
    let mut router = Router::new();
    router.get("/", handler);
    router.get("/foo", foo);
    router.get("/bar", bar);
    
    router.get("/:query", handler);

    Iron::new(router).http("localhost:3000").unwrap();

    fn handler(req: &mut Request) -> IronResult<Response> {
        let ref query = req.extensions.get::<Router>().unwrap().find("query").unwrap_or("/");
        Ok(Response::with(status::Ok))
    }

    fn foo(req: &mut Request) -> IronResult<Response> {
        let ref query = req.extensions.get::<Router>().unwrap().find("foo").unwrap_or("/");
        Ok(Response::with(status::Ok))
    }

    fn bar(req: &mut Request) -> IronResult<Response> {
        let ref query = req.extensions.get::<Router>().unwrap().find("bar").unwrap_or("/");
        //Ok(Response::with(status::Ok))
        let version = HttpVersion::Http11;
        let body:hyper::http::HttpWriter<&mut std::io::Write> = HttpWriter::;
        let status = 1;
        let headers = 1;
        Ok(HttpResponse::construct(version, body, status, headers))
    }
}